{
  "apiDefinition" : {
    "info" : {
      "description" : "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
      "version" : "1.0.11",
      "title" : "Swagger Petstore - OpenAPI 3.0",
      "termsOfService" : "http://swagger.io/terms/",
      "contact" : {
        "email" : "apiteam@swagger.io"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "serviceRegistryDisplayName" : "Pet_Store_1",
    "tags" : [ {
      "name" : "pet",
      "description" : "Everything about your Pets",
      "externalDocs" : {
        "description" : "Find out more",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "store",
      "description" : "Access to Petstore orders",
      "externalDocs" : {
        "description" : "Find out more about our store",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "user",
      "description" : "Operations about user"
    } ],
    "schemes" : [ ],
    "security" : [ ],
    "paths" : {
      "/pet" : {
        "put" : {
          "tags" : [ "pet" ],
          "summary" : "Update an existing pet",
          "description" : "Update an existing pet by Id",
          "operationId" : "updatePet",
          "consumes" : [ "application/xml", "application/json", "application/x-www-form-urlencoded" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "Successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Validation exception",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "updatePet"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Add a new pet to the store",
          "description" : "Add a new pet to the store",
          "operationId" : "addPet",
          "consumes" : [ "application/xml", "application/json", "application/x-www-form-urlencoded" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "Successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Invalid input",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ "New Scope" ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "addPet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet",
        "enabled" : true
      },
      "/user/{username}" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Get user by user name",
          "description" : "",
          "operationId" : "getUserByName",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be fetched. Use user1 for testing. ",
            "required" : true,
            "type" : "string",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getUserByName"
          }
        },
        "put" : {
          "tags" : [ "user" ],
          "summary" : "Update user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "updateUser",
          "consumes" : [ "application/xml", "application/json", "application/x-www-form-urlencoded" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "name that need to be deleted",
            "required" : true,
            "type" : "string",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              },
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "updateUser"
          }
        },
        "delete" : {
          "tags" : [ "user" ],
          "summary" : "Delete user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "deleteUser",
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be deleted",
            "required" : true,
            "type" : "string",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid username supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/{username}",
        "enabled" : true
      },
      "/pet/findByStatus" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by status",
          "description" : "Multiple status values can be provided with comma separated strings",
          "operationId" : "findPetsByStatus",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "status",
            "in" : "query",
            "description" : "Status values that need to be considered for filter",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "default" : "available",
            "parameterSchema" : {
              "type" : "string",
              "enum" : [ "available", "pending", "sold" ],
              "default" : "available"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid status value",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByStatus"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByStatus",
        "enabled" : true
      },
      "/user/createWithList" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "Creates list of users with given input array",
          "operationId" : "createUsersWithListInput",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "Successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithListInput"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/createWithList",
        "enabled" : true
      },
      "/pet/{petId}/uploadImage" : {
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "uploads an image",
          "description" : "",
          "operationId" : "uploadFile",
          "consumes" : [ "application/octet-stream" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to update",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "additionalMetadata",
            "in" : "query",
            "description" : "Additional Metadata",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApiResponse"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"string\",\"format\":\"binary\"}"
                },
                "examples" : { }
              }
            },
            "name" : "uploadFile"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}/uploadImage",
        "enabled" : true
      },
      "/store/inventory" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Returns pet inventories by status",
          "description" : "Returns a map of status codes to quantities",
          "operationId" : "getInventory",
          "produces" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"object\",\"additionalProperties\":{\"type\":\"integer\",\"format\":\"int32\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "api_key" : [ ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getInventory"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/inventory",
        "enabled" : true
      },
      "/user/login" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs user into the system",
          "description" : "",
          "operationId" : "loginUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "query",
            "description" : "The user name for login",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "string"
            }
          }, {
            "name" : "password",
            "in" : "query",
            "description" : "The password for login in clear text",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : {
                "X-Expires-After" : {
                  "name" : "X-Expires-After",
                  "in" : "header",
                  "description" : "date in UTC when token expires",
                  "required" : false,
                  "type" : "string",
                  "format" : "date-time",
                  "style" : "SIMPLE",
                  "explode" : false,
                  "examples" : { },
                  "parameterSchema" : {
                    "type" : "string",
                    "format" : "date-time"
                  }
                },
                "X-Rate-Limit" : {
                  "name" : "X-Rate-Limit",
                  "in" : "header",
                  "description" : "calls per hour allowed by the user",
                  "required" : false,
                  "type" : "integer",
                  "format" : "int32",
                  "style" : "SIMPLE",
                  "explode" : false,
                  "examples" : { },
                  "parameterSchema" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username/password supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "loginUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/login",
        "enabled" : true
      },
      "/user" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Create user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "createUser",
          "consumes" : [ "application/xml", "application/json", "application/x-www-form-urlencoded" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              },
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "createUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user",
        "enabled" : true
      },
      "/pet/findByTags" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by tags",
          "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId" : "findPetsByTags",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "tags",
            "in" : "query",
            "description" : "Tags to filter by",
            "required" : false,
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid tag value",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByTags"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByTags",
        "enabled" : true
      },
      "/store/order" : {
        "post" : {
          "tags" : [ "store" ],
          "summary" : "Place an order for a pet",
          "description" : "Place a new order in the store",
          "operationId" : "placeOrder",
          "consumes" : [ "application/xml", "application/json", "application/x-www-form-urlencoded" ],
          "produces" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Invalid input",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              },
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              }
            },
            "name" : "placeOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order",
        "enabled" : true
      },
      "/user/logout" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs out current logged in user session",
          "description" : "",
          "operationId" : "logoutUser",
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "logoutUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/logout",
        "enabled" : true
      },
      "/pet/{petId}" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Find pet by ID",
          "description" : "Returns a single pet",
          "operationId" : "getPetById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to return",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "api_key" : [ ]
            }
          }, {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getPetById"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Updates a pet in the store with form data",
          "description" : "",
          "operationId" : "updatePetWithForm",
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet that needs to be updated",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of pet that needs to be updated",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "string"
            }
          }, {
            "name" : "status",
            "in" : "query",
            "description" : "Status of pet that needs to be updated",
            "required" : false,
            "type" : "string",
            "style" : "FORM",
            "explode" : true,
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "updatePetWithForm"
          }
        },
        "delete" : {
          "tags" : [ "pet" ],
          "summary" : "Deletes a pet",
          "description" : "delete a pet",
          "operationId" : "deletePet",
          "parameters" : [ {
            "name" : "api_key",
            "in" : "header",
            "description" : "",
            "required" : false,
            "type" : "string",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "string"
            }
          }, {
            "name" : "petId",
            "in" : "path",
            "description" : "Pet id to delete",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid pet value",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "requirements" : {
              "petstore_auth" : [ "write:pets", "read:pets" ]
            }
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deletePet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}",
        "enabled" : true
      },
      "/store/order/{orderId}" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Find purchase order by ID",
          "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
          "operationId" : "getOrderById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of order that needs to be fetched",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : { },
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getOrderById"
          }
        },
        "delete" : {
          "tags" : [ "store" ],
          "summary" : "Delete purchase order by ID",
          "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
          "operationId" : "deleteOrder",
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of the order that needs to be deleted",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "style" : "SIMPLE",
            "explode" : false,
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "headersV3" : { },
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order/{orderId}",
        "enabled" : true
      }
    },
    "securityDefinitions" : { },
    "definitions" : { },
    "parameters" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ {
      "description" : "Find out more about Swagger",
      "url" : "http://swagger.io"
    } ],
    "servers" : [ {
      "url" : "https://env548989.apigw-aw-us.webmethods.io/",
      "variables" : { }
    }, {
      "url" : "https://petstore3.swagger.io/api/v3",
      "variables" : { }
    } ],
    "components" : {
      "schemas" : {
        "Order" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"complete\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"10\"},\"petId\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"198772\"},\"quantity\":{\"type\":\"integer\",\"format\":\"int32\",\"example\":\"7\"},\"shipDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"status\":{\"type\":\"string\",\"description\":\"Order Status\",\"example\":\"approved\",\"enum\":[\"placed\",\"approved\",\"delivered\"]}},\"xml\":{\"name\":\"order\"}}"
        },
        "Category" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"1\"},\"name\":{\"type\":\"string\",\"example\":\"Dogs\"}},\"xml\":{\"name\":\"category\"}}"
        },
        "User" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\",\"example\":\"john@email.com\"},\"firstName\":{\"type\":\"string\",\"example\":\"John\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"10\"},\"lastName\":{\"type\":\"string\",\"example\":\"James\"},\"password\":{\"type\":\"string\",\"example\":\"12345\"},\"phone\":{\"type\":\"string\",\"example\":\"12345\"},\"userStatus\":{\"type\":\"integer\",\"description\":\"User Status\",\"format\":\"int32\",\"example\":\"1\"},\"username\":{\"type\":\"string\",\"example\":\"theUser\"}},\"xml\":{\"name\":\"user\"}}"
        },
        "Address" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"city\":{\"type\":\"string\",\"example\":\"Palo Alto\"},\"state\":{\"type\":\"string\",\"example\":\"CA\"},\"street\":{\"type\":\"string\",\"example\":\"437 Lytton\"},\"zip\":{\"type\":\"string\",\"example\":\"94301\"}},\"xml\":{\"name\":\"address\"}}"
        },
        "Customer" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"address\":{\"type\":\"array\",\"xml\":{\"name\":\"addresses\",\"wrapped\":true},\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Address\"}},\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"100000\"},\"username\":{\"type\":\"string\",\"example\":\"fehguy\"}},\"xml\":{\"name\":\"customer\"}}"
        },
        "Tag" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"tag\"}}"
        },
        "ApiResponse" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"format\":\"int32\"},\"message\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"xml\":{\"name\":\"##default\"}}"
        },
        "Pet" : {
          "type" : "gateway",
          "schema" : "{\"required\":[\"name\",\"photoUrls\"],\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Category\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":\"10\"},\"name\":{\"type\":\"string\",\"example\":\"doggie\"},\"photoUrls\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"string\",\"xml\":{\"name\":\"photoUrl\"}}},\"status\":{\"type\":\"string\",\"description\":\"pet status in the store\",\"enum\":[\"available\",\"pending\",\"sold\"]},\"tags\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Tag\"}}},\"xml\":{\"name\":\"pet\"}}"
        }
      },
      "responses" : { },
      "parameters" : { },
      "examples" : { },
      "requestBodies" : {
        "Pet" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              },
              "examples" : { }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              },
              "examples" : { }
            }
          },
          "name" : "Pet"
        },
        "UserArray" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "gateway",
                "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\"}}"
              },
              "examples" : { }
            }
          },
          "name" : "UserArray"
        }
      },
      "headers" : { },
      "links" : { },
      "callbacks" : { }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "https://env548989.apigw-aw-us.webmethods.io/",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  }, {
    "passSecurityHeaders" : true,
    "uri" : "https://petstore3.swagger.io/api/v3",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "PetStore",
  "apiVersion" : "1",
  "apiDescription" : "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
  "maturityState" : "Beta",
  "isActive" : true,
  "type" : "REST",
  "owner" : "venkatasurendrareddy.pydela@cognizant.com",
  "policies" : [ "31993433-627c-4d74-874a-d8bfe09fed86" ],
  "referencedFiles" : {
    "petStore.json" : "openapi: 3.0.3\ninfo:\n  title: Swagger Petstore - OpenAPI 3.0\n  description: |-\n    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n    \n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v3\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n  - name: user\n    description: Operations about user\npaths:\n  /pet:\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: Update an existing pet by Id\n      operationId: updatePet\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: false\n          explode: true\n          schema:\n            type: string\n            default: available\n            enum:\n              - available\n              - pending\n              - sold\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: query\n          description: Name of pet that needs to be updated\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of pet that needs to be updated\n          schema:\n            type: string\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: delete a pet\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          description: ''\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: additionalMetadata\n          in: query\n          description: Additional Metadata\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: Place a new order in the store\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '405':\n          description: Invalid input\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of order that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: false\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Update user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent user in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          xml:\n            name: addresses\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Address'\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: '94301'\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: '12345'\n        phone:\n          type: string\n          example: '12345'\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          example: 1\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: '##default'\n  requestBodies:\n    Pet:\n      description: Pet object that needs to be added to the store\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n    UserArray:\n      description: List of user object\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://petstore3.swagger.io/oauth/authorize\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n"
  },
  "tracingEnabled" : false,
  "scopes" : [ {
    "name" : "New Scope",
    "description" : "",
    "oAuth2ScopeName" : "802e41fd-c091-4895-89c0-47269815cddc",
    "policies" : [ "0c421a7c-5ca0-40a4-91ed-6b7a149cad1d" ],
    "mashedUpAPI" : false
  } ],
  "publishedPortals" : [ ],
  "creationDate" : "2022-11-18 06:39:20 GMT",
  "lastModified" : "2023-01-09 13:49:21 GMT",
  "systemVersion" : 1,
  "gatewayEndpoints" : { },
  "deployments" : [ "APIGateway" ],
  "id" : "1bb49088-2bc8-4a2e-a2e9-5add638d1c17"
}